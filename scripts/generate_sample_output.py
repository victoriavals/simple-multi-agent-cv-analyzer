#!/usr/bin/env python3
"""
Generate sample output for documentation purposes.

This script reads samples/sample_cv.txt, runs the CV analysis pipeline
for "Senior AI Engineer" role in Indonesian, and writes the result to
samples/sample_output.md.

Usage:
    python scripts/generate_sample_output.py

Requirements:
    - All API keys must be configured in .env or environment
    - samples/sample_cv.txt must exist
    - Network access for Tavily market intelligence

Exit codes:
    0: Success
    1: General error (missing files, API errors, etc.)
"""

from __future__ import annotations
import sys
import os
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent.resolve()
sys.path.insert(0, str(project_root))

from dotenv import load_dotenv
from src.state import PipelineState
from src.graph.workflow import build_graph
from src.llm_provider import normalize_provider


def main() -> int:
    """Generate sample output and return exit code."""
    
    # Load environment variables
    load_dotenv()
    
    # Define paths
    sample_cv_path = project_root / "samples" / "sample_cv.txt"
    output_path = project_root / "samples" / "sample_output.md"
    
    # Configuration
    target_role = "Senior AI Engineer"
    language = "indonesia"
    provider = "auto"
    
    print(f"🔄 Generating sample output...")
    print(f"   CV: {sample_cv_path}")
    print(f"   Role: {target_role}")
    print(f"   Language: {language}")
    print(f"   Provider: {provider}")
    print(f"   Output: {output_path}")
    print()
    
    # Validate input file exists
    if not sample_cv_path.exists():
        print(f"❌ ERROR: Sample CV not found at {sample_cv_path}")
        print("   Please ensure samples/sample_cv.txt exists in the project.")
        return 1
    
    # Check API keys
    required_keys = ["TAVILY_API_KEY"]
    missing_keys = []
    
    for key in required_keys:
        if not os.getenv(key):
            missing_keys.append(key)
    
    if missing_keys:
        print(f"❌ ERROR: Missing required API keys: {', '.join(missing_keys)}")
        print("   Please configure these keys in .env or environment variables.")
        return 1
    
    try:
        # Create pipeline state
        state = PipelineState(
            cv_path=str(sample_cv_path),
            target_role=target_role,
            language=language,
            provider=normalize_provider(provider)
        )
        
        # Build and run the graph
        print("🚀 Running CV analysis pipeline...")
        run_graph = build_graph()
        final_state = run_graph(state)
        
        # Handle dict response from LangGraph
        if isinstance(final_state, dict):
            final_state = PipelineState.model_validate(final_state)
        
        # Check for errors
        if final_state.errors:
            print("⚠️  Pipeline completed with warnings:")
            for error in final_state.errors:
                print(f"   - {error}")
            print()
        
        # Validate output
        if not final_state.report_markdown:
            print("❌ ERROR: No report generated by pipeline")
            return 1
        
        # Write output file
        print("📝 Writing sample output...")
        output_path.parent.mkdir(exist_ok=True)
        output_path.write_text(final_state.report_markdown, encoding="utf-8")
        
        # Success summary
        lines = len(final_state.report_markdown.splitlines())
        chars = len(final_state.report_markdown)
        
        print(f"✅ SUCCESS: Sample output generated successfully!")
        print(f"   File: {output_path}")
        print(f"   Size: {lines} lines, {chars} characters")
        print(f"   Language: {language}")
        print(f"   Role: {target_role}")
        
        # Show first few lines as preview
        preview_lines = final_state.report_markdown.splitlines()[:3]
        if preview_lines:
            print(f"\n📋 Preview:")
            for line in preview_lines:
                print(f"   {line}")
            if len(final_state.report_markdown.splitlines()) > 3:
                print("   ...")
        
        return 0
        
    except Exception as e:
        print(f"❌ ERROR: Pipeline execution failed")
        print(f"   Details: {str(e)}")
        print(f"   Type: {type(e).__name__}")
        
        # Additional context for common errors
        error_str = str(e).lower()
        if "api" in error_str and "key" in error_str:
            print("   💡 Tip: Check your API keys are valid and have sufficient quota")
        elif "tavily" in error_str:
            print("   💡 Tip: Verify Tavily API key and internet connection")
        elif "gemini" in error_str or "mistral" in error_str:
            print("   💡 Tip: Try a different LLM provider with --provider flag")
        
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)